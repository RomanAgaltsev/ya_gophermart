// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (login, number)
VALUES ($1, $2) RETURNING id
`

type CreateOrderParams struct {
	Login  string
	Number string
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.Login, arg.Number)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (login, password)
VALUES ($1, $2) RETURNING id
`

type CreateUserParams struct {
	Login    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Login, arg.Password)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createWithdraw = `-- name: CreateWithdraw :one
INSERT INTO withdrawals (order_number, sum)
VALUES ($1, $2) RETURNING id
`

type CreateWithdrawParams struct {
	OrderNumber string
	Sum         pgtype.Numeric
}

func (q *Queries) CreateWithdraw(ctx context.Context, arg CreateWithdrawParams) (int32, error) {
	row := q.db.QueryRow(ctx, createWithdraw, arg.OrderNumber, arg.Sum)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, login, number, status, accrual, uploaded_at
FROM orders
WHERE number = $1 LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, number string) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, number)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Number,
		&i.Status,
		&i.Accrual,
		&i.UploadedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, login, password, created_at
FROM users
WHERE login = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, login, number, status, accrual, uploaded_at
FROM orders
WHERE login = $1
ORDER BY uploaded_at DESC
`

func (q *Queries) ListOrders(ctx context.Context, login string) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders, login)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Number,
			&i.Status,
			&i.Accrual,
			&i.UploadedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWithdrawals = `-- name: ListWithdrawals :many
SELECT id, login, order_number, sum, processed_at
FROM withdrawals
WHERE login = $1 LIMIT 1
`

func (q *Queries) ListWithdrawals(ctx context.Context, login string) ([]Withdrawal, error) {
	rows, err := q.db.Query(ctx, listWithdrawals, login)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Withdrawal
	for rows.Next() {
		var i Withdrawal
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.OrderNumber,
			&i.Sum,
			&i.ProcessedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
