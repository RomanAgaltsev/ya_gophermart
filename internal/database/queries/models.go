// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package queries

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type OrderStatus string

const (
	OrderStatusNEW        OrderStatus = "NEW"
	OrderStatusPROCESSING OrderStatus = "PROCESSING"
	OrderStatusINVALID    OrderStatus = "INVALID"
	OrderStatusPROCESSED  OrderStatus = "PROCESSED"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus
	Valid       bool // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type Balance struct {
	ID        int32
	Login     string
	Accrued   float64
	Withdrawn float64
}

type Order struct {
	ID         int32
	Login      string
	Number     string
	Status     OrderStatus
	Accrual    float64
	UploadedAt time.Time
}

type User struct {
	ID        int32
	Login     string
	Password  string
	CreatedAt time.Time
}

type Withdrawal struct {
	ID          int32
	Login       string
	OrderNumber string
	Sum         float64
	ProcessedAt time.Time
}
