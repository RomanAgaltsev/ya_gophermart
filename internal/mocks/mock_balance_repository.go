// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RomanAgaltsev/ya_gophermart/internal/app/gophermart/service/balance (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_balance_repository.go -package=mocks github.com/RomanAgaltsev/ya_gophermart/internal/app/gophermart/service/balance Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/RomanAgaltsev/ya_gophermart/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateBalance mocks base method.
func (m *MockRepository) CreateBalance(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBalance", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBalance indicates an expected call of CreateBalance.
func (mr *MockRepositoryMockRecorder) CreateBalance(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBalance", reflect.TypeOf((*MockRepository)(nil).CreateBalance), ctx, user)
}

// GetBalance mocks base method.
func (m *MockRepository) GetBalance(ctx context.Context, user *model.User) (*model.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, user)
	ret0, _ := ret[0].(*model.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockRepositoryMockRecorder) GetBalance(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockRepository)(nil).GetBalance), ctx, user)
}

// GetListOfWithdrawals mocks base method.
func (m *MockRepository) GetListOfWithdrawals(ctx context.Context, user *model.User) (model.Withdrawals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOfWithdrawals", ctx, user)
	ret0, _ := ret[0].(model.Withdrawals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOfWithdrawals indicates an expected call of GetListOfWithdrawals.
func (mr *MockRepositoryMockRecorder) GetListOfWithdrawals(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOfWithdrawals", reflect.TypeOf((*MockRepository)(nil).GetListOfWithdrawals), ctx, user)
}

// WithdrawFromBalance mocks base method.
func (m *MockRepository) WithdrawFromBalance(ctx context.Context, user *model.User, orderNumber string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFromBalance", ctx, user, orderNumber, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawFromBalance indicates an expected call of WithdrawFromBalance.
func (mr *MockRepositoryMockRecorder) WithdrawFromBalance(ctx, user, orderNumber, sum any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFromBalance", reflect.TypeOf((*MockRepository)(nil).WithdrawFromBalance), ctx, user, orderNumber, sum)
}
